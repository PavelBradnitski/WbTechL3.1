
services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:15
    container_name: postgres_notify
    ports:
      - "5432:5432"
    volumes:
      - ./internal/db/init:/docker-entrypoint-initdb.d
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U notify_user -d notifications"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  migrate:
    image: migrate/migrate
    volumes:
      - ./internal/migrations:/migrations
    command: [
      "-path", "/migrations",
      "-database", "postgres://notify_user:notify_pass@postgres:5432/notifications?sslmode=disable",
      "up"
    ]
    depends_on:
      postgres:
        condition: service_healthy

  api:
    build: .
    container_name: notify-api
    command: ["./notify-api"]
    ports:
      - "8081:8081"
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_started
      migrate:
        condition: service_completed_successfully
    volumes:
      - ./internal/migrations:/app/migrations

  worker:
    build: .
    container_name: notify-worker
    command: ["./notify-worker"]
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    volumes:
      - ./internal/migrations:/app/migrations

  scheduler:
    build: .
    container_name: notify-scheduler
    command: ["./notify-scheduler"]
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    volumes:
      - ./internal/migrations:/app/migrations

  mailhog:
    image: mailhog/mailhog
    container_name: mailhog
    ports:
      - "1025:1025"
      - "8025:8025"

  frontend:
    build:
      context: .
      dockerfile: frontend.Dockerfile
    container_name: frontend
    ports:
      - "8080:80"

volumes:
  pgdata:
